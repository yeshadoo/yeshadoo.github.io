<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Thought on Hadoo&#39;s Blog</title>
    <link>https://hanchao666.top/categories/thought/</link>
    <description>Recent content in Thought on Hadoo&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 08 Sep 2023 10:52:26 +0800</lastBuildDate><atom:link href="https://hanchao666.top/categories/thought/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>聊聊博客</title>
      <link>https://hanchao666.top/posts/about-blog/</link>
      <pubDate>Fri, 08 Sep 2023 10:52:26 +0800</pubDate>
      
      <guid>https://hanchao666.top/posts/about-blog/</guid>
      <description>正值博客迁移，随便写写。
我与博客 初识
大学期间就开始接触博客了，平时学习也有记录笔记的习惯，发布的第一篇博客是在大二暑假，当时闲着没事在家刷题，那时主要的搜索手段还是CSDN，于是心血来潮的就把当时的解题思路发布出去了，具体时间是2019.8.12，
CSDN不愧是国内开发者解决问题的聚集之地(可能StackOverFlow访问不到)，后来又陆续发布了几篇，收获到了不错的曝光度，当时每天看着浏览量和站内月排名逐渐上升，还是挺有成就感的，最高的一篇浏览量动态规划解决最长公共子序列(Java实现)目前已经到了2W+，由此可见，培养一个习惯还是要有一定激励机制的。
开始折腾
大二结束，大三就开始准备秋招了，这时认识了一个B站 up主：CodeSheep。这个老羊头当时还没现在这么鸽，更新的还是比较频繁的，他当时推出了一系列的博客相关视频，包括写博客的好处、如何搭建等，于是爱折腾、还想装个B的我开始了博客自建之路。
接触Halo
当时搭建博客除了想提升一下逼格之外，还有一个刚需，找实习简历上缺项目！在学校做的辣鸡HR管理系统、图书管理系统，我自己都觉得拿不出手，所以，我就去找了一下基于Java生态的博客，Halo进入了我的视线。
于是乎开始了第一次动态博客的建站，使用腾讯云学生套餐买服务器，应用部署，主题调参，域名注册&amp;hellip;&amp;hellip;
搭建成功开门大吉，当时在博客上面陆续更新了很多文章，主要内容都是面试相关的哈哈哈，还是挺有成就感的。
不过随着后面的折腾，已经很久没用halo了，刚才又看了一眼Halo现状，好家伙，士别三日当刮目相待了呀。
被Handsome主题勾引到了Typecho
这是第二次搭建动态博客，不得不说一下Handsome主题，这是主题作者的网站。
这是一款付费主题，印象中是80+。它有自己的管理后台，可以进行多维度调参，当时看到这个主题之后，就立刻心动了。所以男人真的靠不住，喜新厌旧呸呸呸。当时完全是瞎折腾，折腾的很累很费时，但是在部署成功，将主题的参数布局调换成自己满意的状态之后，真的是乐在其中，有点理解为什么小时候妹妹那么喜欢娃娃换装游戏了。。当然，这也是我这次迁移之前的博客，目前是这个样子的：
还是挺好看的吧，嘿嘿。
回归本源
直到遇见平凡，才是唯一的答案。
这也是为什么我要进行这次的博客迁移。
to be honest，其实最直接的原因，是腾讯云的服务器又要到期了，但是续费的价钱已经没有新人首单优惠了，，
一年这个价钱，啥条件啊，我的钱还得攒着娶媳妇呢。。
所以所以，我对写博客这件事进行了一次思考，思考的集中点主要在于，动态博客和静态博客的选择。
二者具体的优劣势这里不再做赘述，可以参考上述超链接。
没有最好的，只有最适合自己的。
我需要的博客的到底是什么样子的？
一个内容展示平台，分享观点，记录思考。 好的书写体验，类比RPC，写博客的书写体验以及发布流程，就像在本地书写一样。 低成本，包括部署运维成本，发布构建成本。 其他没了。 我觉的不管怎么选择，**博客的唯一核心竞争力，是内容，而不是展现形式。**所以可以发现，很多技术大牛的博客，主题都很Simple、Stupid，但是不影响人家发布影响行业的技术观点。看Martin Fowler的主页，连个分类、TOC、归档都没有，但人家福勒爷就是在这上面发布的重构。。
所以我的最终方案是：Hugo + Github Pages。
为什么写博客 根据我个人的理解，瞎说说。
一言以蔽之，主动学习。
在一开始觉得写博客是一件浪费时间的事情，学完就记在脑子里呀，正经人谁写这玩意啊，赶紧再学其他的，他不香吗？
我的思想转变，是受两件事情的影响，其实都是一个道理。
主动学习理论。 主动学习是一个方法论，区别于被动学习。之前看过一个理论，对于信息或者知识的接收，在不同环节是逐渐衰减的(信噪比)，例如，
你听到的 &amp;gt; 能听的进去的 &amp;gt; 能理解的 &amp;gt; 能记住的 &amp;gt; 能说出来的 &amp;gt; 能教会别人的。
所以在很多情况下，你以为已经掌握的一个理论，让你说出来的话，就会吞吞吐吐的，根本原因就是思路还不清晰，缺少细节，而细节才见功夫。所以很多人在交代任务时，除了高情商的说一句“不知道我说清楚了吗”，还会再来一句，“你重复一遍呗”，就是这个道理。
主动学习，就是一种深度学习，是理论和实践两条腿走路的学习。
职场导师 进入职场之后，进行过若干次专题技术分享，即针对自己遇到的问题，分析出难点，评估水平方案，给出最佳实践，最后举一反三提炼方法论，这个过程是导师教给我的，有一句话印象很深，“所谓的技术分享，其实最大的收获者是你自己”。确实是这么一回事儿。真正的高手，能用通俗易懂的语言把问题描述清楚并教会给别人，如果你能把别人也教会，说明就是真的掌握了，写博客，就是一场知识的传播教学。
再多说点，关于体系化思考。
从高中开始，老师就一直强调知识要进行体系化，为什么要体系化？
我们平时接触到的知识，大多都是信息孤岛，只有整合孤岛，才有可能触类旁通。以目前的市面数据库产品为例，虽然每年都会涌现出新的技术产品，但是万变不离其宗的是底层数据结构，如果你知道它的底层数据结构，就立马能知道这个产品是什么尿性。例如，以B+树作为存储结构，那么他就是对查询更友好，因为写入可能会涉及到页的分裂；如果以日志作为存储结构，那么顺序追加的方式会对写入更加友好。
三维世界的道理，万变不离其宗，物理规律逃不出声光热力电，世间道理相通，计算机科学也是如此。体系化的知识体系，可以视作一颗树形结构，最终的道理就是Root节点，由Root节点开始，道生一，一生二&amp;hellip;&amp;hellip;
扯远了。。。
写什么 根据黄金圈法则，上面已经介绍了关于博客的How和Why，下面来聊一聊What。
我给自己博客定义的Slogan是：记录思考，见证成长。只要是对成长有帮助的，只要是经过自己思考的，都可以，内容题材不限，也不会强行限制在技术博客，正如上述所说，道理都是相同的。
具体内容上，我不会写一些入门性的文章，例如软件的安装、API的调用等，RTFM！，我主要会进行专题形式的记录，以某一问题为契机，以解决实际问题为目的，问题驱动式学习，不会空谈技术说教，因为技术如果一旦脱离了应用场景，一文不值。
同时呢，生活不是只有技术，我也会不定期的来一些和我兴趣爱好密切相关的话题，例如跑步、摄影==。</description>
    </item>
    
    <item>
      <title>《代码的艺术》读书笔记</title>
      <link>https://hanchao666.top/posts/the-art-of-code-reading-note/</link>
      <pubDate>Wed, 24 Aug 2022 14:16:28 +0800</pubDate>
      
      <guid>https://hanchao666.top/posts/the-art-of-code-reading-note/</guid>
      <description>书读的断断续续，所以读书笔记写的也是零零散散
本书的作者是章淼老师，第一次邂逅是在他的个人公众号《章老师说》中，当时看了几节公开课，了解到章老师是清华大学计算机博士、百度代码规范委员会主席，于是就抱着崇拜的心理在京东下单了这本《代码的艺术》。
首先这本书的书名就深得我心，一直以为，把代码写好真的是一门艺术，也是一名工程师应该有的追求，好的代码，如诗般优雅。在如今业务飞快发展的时代，工程师如果能够在时间紧、任务繁重的开发周期内，重视代码的可读性、可维护性，完善好相关文档，这种“慎独”式开发，真的是难能可贵。
本书的主要内容主要围绕的是软件工程能力，这也是我大学本科的专业课程。曾经枯燥无味，应付期末考试的大学课程，如今在工作一年、经历了多次项目迭代、踩过很多次坑之后，让我对软件工程肃然起敬，看来人的见识格局还是会随着时间、阅历不断发展的。
那什么是工程能力？
使用系统化的方法，在保证质量的前提下，更高效率的为客户/用户持续交付有价值的软件或服务的能力。
短短的一句话，信息量巨大，且足以让我为之探索并努力整个职业生涯。
系统化的方法 正如盖楼有很成熟的工序和方案，软件工程也是一个非常专业的领域。一个软件的生命周期，由产品设计、需求分析、系统设计、编码实现、质量保证、项目管理、系统运维和产品运营等多个模块组成，环环相扣。
保证质量 在《软件开发的201个原则》中，作为一个软件项目，最重要也是最根本的原则，就是质量第一。没有保证质量，不管你使用多么巧妙的设计方案、多么优雅的设计模式，都狗屁不是，站不住脚的。但事实上是软件开发过程中的缺陷是无处不在、在所难免的，所以能够通过严谨的编码意识、科学的测试方法以及成熟的工程经验来把控项目质量，也是评判一个工程师是否优秀的标准。
更高效率 说到效率，这里以我的自身经验，说一下入职以来导师对我的贯彻，因为那是进入职场第一天，所以尤其深刻。即：工具化思维，尤其在从事技术服务公司的平台类产品中，显的更为重要。会不会使用工具，是人和动物的根本区别，这是初中历史书的一句必考点。如今人类社会文明之高，很大程度上得益于对于工具的不断封装和升级改造，将既有智慧和既有能力沉淀为工具，在下一阶段进行复用，不断的迭代向前，这就是人类的牛逼之处，也是发展的趋势。正如我们想从北京开车到上海，不会去单独买个方向盘、买四个轮子，而是直接开着买来的车即可；正如互联网如火如荼的沉淀中台；正如公共框架对开发工作的简化&amp;hellip;&amp;hellip;
研发的效率可提升的空间很大，且永无止境，我相信只要用心关注项目的细节，多想、敢想，总会有可以提高效率的点。
持续 软件项目的研发和维护都是长周期的(去除部分圈钱上市跑路的项目)，一定得有长期维护、长期服务、持续改进优化的准备。这里我主要想到的就是重构。重构是伴随着项目整个生命周期的，好的项目并不是一开始设计出来的，而是演进出来的，在项目发展初期，可能由于业务理解不准确、未充分考虑后续兼容等，工程师可能会让项目的设计有所偏差，但毕竟谁都无法预测未来，所以我们要时刻警惕工程中的坏味道，持续重构，小步快跑，让项目的发展处于一个稳定高效的加速度中，而不是每次都从0到1的推到重来，这很重要，也是一个架构师的职责。
价值 公司招聘工程师，就是为了解决问题、提供价值的。这句话可谓是充满了京东特色，因为“解决问题”，是老大的老大提出的，提供价值，是老大的老大的老大提出的。走出校园后，思维的一个变化点就是，之前总是从纯技术角度思考问题，喜欢使用复杂和高深的技术，觉得这更能体现工作价值，如今觉得，虽然技术很重要，但不能忽略业务，如果技术不能为业务创造价值，那么这个技术就没有价值(排除某些纯技术探索类项目)。技术，包括系统的设计和代码的编写，只是手段，不是目的。完成业务目标为第一，如果能够以更低的成本、更高的效率完成，那就更好了。工程师一定要业务和技术两条腿走路，业务为知，技术为行，知行合一，无往不利也。
(&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;知乎分割线&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;)
人在美国，刚下飞机(bushi)
这本书的风格偏向理论化的工程知识，没有用大量的笔墨来描述工程细节，其实这种书籍是一个陷阱，虽然内容读起来很流畅、阅读速度也较快、内容也很认同，但实际上最重要的是吸收了多少、落地实践了多少。正如当时在极客时间学习《设计模式之美》专栏时，每一个设计原则、设计原则都理解起来并不难，但是如何能够根据项目的实际场景，将这些东西恰到火候的应用落地，才是最难的。书中看似简单通俗的话语，其实是大佬们在互联网工程领域摸爬滚打20多年总结的智慧，简单就是终极的复杂，这种书籍，一定是常读常新的。很庆幸刚进入这个行业，就能够接触到这样的书籍，很庆幸能够现在有不是那么固执落后的认知，而知易行难，软件开发的领域也是完成符合10000小时定律的，这要踩很多的坑、要走很多的弯路、要打很多的仗，加油吧少年！</description>
    </item>
    
    <item>
      <title>我对程序员英语的思考和规划</title>
      <link>https://hanchao666.top/posts/my-programmer-english-thought/</link>
      <pubDate>Sat, 12 Mar 2022 18:20:10 +0800</pubDate>
      
      <guid>https://hanchao666.top/posts/my-programmer-english-thought/</guid>
      <description> 写博客以来，内容都是纯技术文章，还没发表过思考方法论的文章，这是第一篇。博客的目的就是沉淀思考，不管技术还是生活，道理都是相通的，一花一木，亦是哲学。
思考 信息传播上来讲，
计算机的源头是西方，计算机的通用语言是英语，在计算机设计以及技术产生之初，是没有考虑我们中国人的使用的。在编码方式上，一开始的计算机只有单字节的ASCII码，并不支持汉字，直到GB2312的出现；在技术框架上，一开始只有英文文档，直到有人开始搬运翻译，继续提供给不懂英语的码农使用。
在声音传播中，有一个信噪比的概念：一般来说，信噪比越大，说明混在信号里的噪声越小，声音回放的音质量越高，否则相反。这个概念在信息传播过程中同样适用。技术的源头是西方，我们是受众，那么如何提高信息知识的信噪比，是我们最应该关注的事情。一旦知识中掺杂着“噪声”，那么我们接收的可能就是失真或者扭曲的知识。
在《王牌对王牌》中，有一个传送门的节目:
第一个演员看到真正的词语(信息源)，把自己理解的内容通过动作向后传播，后面的人继续重复这个步骤，直到最后一个人看完前一个人操作完成之后，说出他所理解的词语，而这个词语，往往和真正的词语八竿子都打不着了。这个过程，就是信息在传播中失真的过程。
而我们要做的，就是提高信噪比，让自己接近信息源。
功利上来讲，
英语水平，更精细化一些，英语的读写水平，是一个程序员的必备技能，也决定着程序员的天花板。技术的发展日新月异，
注：21世纪以来底层技术突破不大，但封装程度更高、更易用的框架层出不穷
每年都在涌现一批批的技术名词、一批批的优秀框架，持续学习也是程序员的必备技能之一，如果我们一味的依赖他人翻译过来的的中文资料，或者通过百度CSDN，那无异于等待他人投喂，吃嗟来之食。为什么不把主动权控制在自己手里面呢？并且国外有更加活跃高质量的开源社区，例如Github、stackoverflow，这里单独对比一下stackoverflow和csdn，首先在机制上，stackoverflow的设计理念是每个类型的问题只有一个的，不能重复发表低质量无一亿的帖子，而csdn，各种复制粘贴来的帖子漫天飞。从个人使用体验上来讲，问题粘贴到stackoverflow上，就是比csdn上解决的效率更高一些。
鉴于博客寥寥无几的访问量，说点电视不让播的。提高英语水平，我们能够体验到墙外的文化。在新闻获取上，古人云兼听则明，有些新闻，国内国外一起结合着来看，更好一些，也不要只看新闻联播~多门手艺多条路，以后外企是不是也是一个很好的选择呢？
规划 得益于付费主题的加密功能，已经将这篇文章设置为密码访问了~
英语是一门技能，并不是一种知识，知识的获取在于理解吸收，而技能的提升，在于千锤百炼。千锤百炼，最重要的是坚持，接下来是人类共同面对的问题，如何坚持？
人的大脑都是趋向于安逸和慵懒的，而日复一日的坚持一件不能让自己感觉到爽的事情，这不就是自虐吗？
所以，我的方案是采用万能的分治，分段式坚持。什么叫分段式坚持，也就是阶段性总结复盘，并给自己一些小奖励，能够让自己感觉到，真的变牛逼了。拿跑步来讲，我当初坚持下来的一个直接原因，就是每个月月底的跑步数据，还有日语老师对于我的夸奖哈哈哈，所以，同样也适用于英语。
在具体的举措上：
非紧急情况下，使用英文进行Google搜索 非紧急情况下，使用英英翻译 坚持阅读英文技术书籍，当前目标书籍：《代码大全》 使用英文进行代码注释以及commnit message </description>
    </item>
    
    <item>
      <title>计算机世界有趣的权衡</title>
      <link>https://hanchao666.top/posts/intreasting-trade-off-in-cs/</link>
      <pubDate>Mon, 13 Sep 2021 14:13:51 +0800</pubDate>
      
      <guid>https://hanchao666.top/posts/intreasting-trade-off-in-cs/</guid>
      <description>越来越发现计算机科学中主要讨论的就是权衡取舍，这里作为一个梳理列表，会不定期更新。
计算机存储中访问速度和容量 在上面的金字塔层次结构中，从上到下，设备的访问时延越来越大，容量也越来越大。
分布式集群数据复制 在分布式存储中一般使用持久化和复制的方式来保证数据的高可用，数据在节点间进行复制时，需要写入的节点越多，可用性和数据可靠性就越高，但是写入性能就越低，这是一个天然的矛盾。
并发控制理论 隔离程度与并发能力是相互抵触的，隔离程度越高，并发访问时的吞吐量就越低。 https://en.wikipedia.org/wiki/Concurrency_control?useskin=vector</description>
    </item>
    
  </channel>
</rss>
